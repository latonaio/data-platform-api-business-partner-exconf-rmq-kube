// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerGeneralDatum is an object representing the database table.
type DataPlatformBusinessPartnerGeneralDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName       null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName           null.String `boil:"BusinessPartnerName" json:"BusinessPartnerName,omitempty" toml:"BusinessPartnerName" yaml:"BusinessPartnerName,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                  null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	Industry                      null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	LegalEntityRegistration       null.String `boil:"LegalEntityRegistration" json:"LegalEntityRegistration,omitempty" toml:"LegalEntityRegistration" yaml:"LegalEntityRegistration,omitempty"`
	Language                      null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                null.String `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	OrganizationBPName1           null.String `boil:"OrganizationBPName1" json:"OrganizationBPName1,omitempty" toml:"OrganizationBPName1" yaml:"OrganizationBPName1,omitempty"`
	OrganizationBPName2           null.String `boil:"OrganizationBPName2" json:"OrganizationBPName2,omitempty" toml:"OrganizationBPName2" yaml:"OrganizationBPName2,omitempty"`
	OrganizationBPName3           null.String `boil:"OrganizationBPName3" json:"OrganizationBPName3,omitempty" toml:"OrganizationBPName3" yaml:"OrganizationBPName3,omitempty"`
	OrganizationBPName4           null.String `boil:"OrganizationBPName4" json:"OrganizationBPName4,omitempty" toml:"OrganizationBPName4" yaml:"OrganizationBPName4,omitempty"`
	BPGroup1                      null.String `boil:"BPGroup1" json:"BPGroup1,omitempty" toml:"BPGroup1" yaml:"BPGroup1,omitempty"`
	BPGroup2                      null.String `boil:"BPGroup2" json:"BPGroup2,omitempty" toml:"BPGroup2" yaml:"BPGroup2,omitempty"`
	BPGroup3                      null.String `boil:"BPGroup3" json:"BPGroup3,omitempty" toml:"BPGroup3" yaml:"BPGroup3,omitempty"`
	BPGroup4                      null.String `boil:"BPGroup4" json:"BPGroup4,omitempty" toml:"BPGroup4" yaml:"BPGroup4,omitempty"`
	BPGroup5                      null.String `boil:"BPGroup5" json:"BPGroup5,omitempty" toml:"BPGroup5" yaml:"BPGroup5,omitempty"`
	OrganizationFoundationDate    null.String `boil:"OrganizationFoundationDate" json:"OrganizationFoundationDate,omitempty" toml:"OrganizationFoundationDate" yaml:"OrganizationFoundationDate,omitempty"`
	OrganizationLiquidationDate   null.String `boil:"OrganizationLiquidationDate" json:"OrganizationLiquidationDate,omitempty" toml:"OrganizationLiquidationDate" yaml:"OrganizationLiquidationDate,omitempty"`
	SearchTerm1                   null.String `boil:"SearchTerm1" json:"SearchTerm1,omitempty" toml:"SearchTerm1" yaml:"SearchTerm1,omitempty"`
	SearchTerm2                   null.String `boil:"SearchTerm2" json:"SearchTerm2,omitempty" toml:"SearchTerm2" yaml:"SearchTerm2,omitempty"`
	BusinessPartnerBirthplaceName null.String `boil:"BusinessPartnerBirthplaceName" json:"BusinessPartnerBirthplaceName,omitempty" toml:"BusinessPartnerBirthplaceName" yaml:"BusinessPartnerBirthplaceName,omitempty"`
	BusinessPartnerDeathDate      null.String `boil:"BusinessPartnerDeathDate" json:"BusinessPartnerDeathDate,omitempty" toml:"BusinessPartnerDeathDate" yaml:"BusinessPartnerDeathDate,omitempty"`
	BusinessPartnerIsBlocked      null.Bool   `boil:"BusinessPartnerIsBlocked" json:"BusinessPartnerIsBlocked,omitempty" toml:"BusinessPartnerIsBlocked" yaml:"BusinessPartnerIsBlocked,omitempty"`
	GroupBusinessPartnerName1     null.String `boil:"GroupBusinessPartnerName1" json:"GroupBusinessPartnerName1,omitempty" toml:"GroupBusinessPartnerName1" yaml:"GroupBusinessPartnerName1,omitempty"`
	GroupBusinessPartnerName2     null.String `boil:"GroupBusinessPartnerName2" json:"GroupBusinessPartnerName2,omitempty" toml:"GroupBusinessPartnerName2" yaml:"GroupBusinessPartnerName2,omitempty"`
	AddressID                     null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	IsMarkedForArchiving          null.Bool   `boil:"IsMarkedForArchiving" json:"IsMarkedForArchiving,omitempty" toml:"IsMarkedForArchiving" yaml:"IsMarkedForArchiving,omitempty"`
	BusinessPartnerIDByExtSystem  null.String `boil:"BusinessPartnerIDByExtSystem" json:"BusinessPartnerIDByExtSystem,omitempty" toml:"BusinessPartnerIDByExtSystem" yaml:"BusinessPartnerIDByExtSystem,omitempty"`

	R *dataPlatformBusinessPartnerGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerGeneralDatumColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	CreationDate                  string
	CreationTime                  string
	Industry                      string
	LegalEntityRegistration       string
	Language                      string
	LastChangeDate                string
	LastChangeTime                string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPGroup1                      string
	BPGroup2                      string
	BPGroup3                      string
	BPGroup4                      string
	BPGroup5                      string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	SearchTerm1                   string
	SearchTerm2                   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	IsMarkedForArchiving          string
	BusinessPartnerIDByExtSystem  string
}{
	BusinessPartner:               "BusinessPartner",
	BusinessPartnerFullName:       "BusinessPartnerFullName",
	BusinessPartnerName:           "BusinessPartnerName",
	CreationDate:                  "CreationDate",
	CreationTime:                  "CreationTime",
	Industry:                      "Industry",
	LegalEntityRegistration:       "LegalEntityRegistration",
	Language:                      "Language",
	LastChangeDate:                "LastChangeDate",
	LastChangeTime:                "LastChangeTime",
	OrganizationBPName1:           "OrganizationBPName1",
	OrganizationBPName2:           "OrganizationBPName2",
	OrganizationBPName3:           "OrganizationBPName3",
	OrganizationBPName4:           "OrganizationBPName4",
	BPGroup1:                      "BPGroup1",
	BPGroup2:                      "BPGroup2",
	BPGroup3:                      "BPGroup3",
	BPGroup4:                      "BPGroup4",
	BPGroup5:                      "BPGroup5",
	OrganizationFoundationDate:    "OrganizationFoundationDate",
	OrganizationLiquidationDate:   "OrganizationLiquidationDate",
	SearchTerm1:                   "SearchTerm1",
	SearchTerm2:                   "SearchTerm2",
	BusinessPartnerBirthplaceName: "BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "BusinessPartnerIsBlocked",
	GroupBusinessPartnerName1:     "GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "GroupBusinessPartnerName2",
	AddressID:                     "AddressID",
	IsMarkedForArchiving:          "IsMarkedForArchiving",
	BusinessPartnerIDByExtSystem:  "BusinessPartnerIDByExtSystem",
}

var DataPlatformBusinessPartnerGeneralDatumTableColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	CreationDate                  string
	CreationTime                  string
	Industry                      string
	LegalEntityRegistration       string
	Language                      string
	LastChangeDate                string
	LastChangeTime                string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPGroup1                      string
	BPGroup2                      string
	BPGroup3                      string
	BPGroup4                      string
	BPGroup5                      string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	SearchTerm1                   string
	SearchTerm2                   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	IsMarkedForArchiving          string
	BusinessPartnerIDByExtSystem  string
}{
	BusinessPartner:               "data_platform_business_partner_general_data.BusinessPartner",
	BusinessPartnerFullName:       "data_platform_business_partner_general_data.BusinessPartnerFullName",
	BusinessPartnerName:           "data_platform_business_partner_general_data.BusinessPartnerName",
	CreationDate:                  "data_platform_business_partner_general_data.CreationDate",
	CreationTime:                  "data_platform_business_partner_general_data.CreationTime",
	Industry:                      "data_platform_business_partner_general_data.Industry",
	LegalEntityRegistration:       "data_platform_business_partner_general_data.LegalEntityRegistration",
	Language:                      "data_platform_business_partner_general_data.Language",
	LastChangeDate:                "data_platform_business_partner_general_data.LastChangeDate",
	LastChangeTime:                "data_platform_business_partner_general_data.LastChangeTime",
	OrganizationBPName1:           "data_platform_business_partner_general_data.OrganizationBPName1",
	OrganizationBPName2:           "data_platform_business_partner_general_data.OrganizationBPName2",
	OrganizationBPName3:           "data_platform_business_partner_general_data.OrganizationBPName3",
	OrganizationBPName4:           "data_platform_business_partner_general_data.OrganizationBPName4",
	BPGroup1:                      "data_platform_business_partner_general_data.BPGroup1",
	BPGroup2:                      "data_platform_business_partner_general_data.BPGroup2",
	BPGroup3:                      "data_platform_business_partner_general_data.BPGroup3",
	BPGroup4:                      "data_platform_business_partner_general_data.BPGroup4",
	BPGroup5:                      "data_platform_business_partner_general_data.BPGroup5",
	OrganizationFoundationDate:    "data_platform_business_partner_general_data.OrganizationFoundationDate",
	OrganizationLiquidationDate:   "data_platform_business_partner_general_data.OrganizationLiquidationDate",
	SearchTerm1:                   "data_platform_business_partner_general_data.SearchTerm1",
	SearchTerm2:                   "data_platform_business_partner_general_data.SearchTerm2",
	BusinessPartnerBirthplaceName: "data_platform_business_partner_general_data.BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "data_platform_business_partner_general_data.BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "data_platform_business_partner_general_data.BusinessPartnerIsBlocked",
	GroupBusinessPartnerName1:     "data_platform_business_partner_general_data.GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "data_platform_business_partner_general_data.GroupBusinessPartnerName2",
	AddressID:                     "data_platform_business_partner_general_data.AddressID",
	IsMarkedForArchiving:          "data_platform_business_partner_general_data.IsMarkedForArchiving",
	BusinessPartnerIDByExtSystem:  "data_platform_business_partner_general_data.BusinessPartnerIDByExtSystem",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformBusinessPartnerGeneralDatumWhere = struct {
	BusinessPartner               whereHelperint
	BusinessPartnerFullName       whereHelpernull_String
	BusinessPartnerName           whereHelpernull_String
	CreationDate                  whereHelpernull_String
	CreationTime                  whereHelpernull_String
	Industry                      whereHelpernull_String
	LegalEntityRegistration       whereHelpernull_String
	Language                      whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	LastChangeTime                whereHelpernull_String
	OrganizationBPName1           whereHelpernull_String
	OrganizationBPName2           whereHelpernull_String
	OrganizationBPName3           whereHelpernull_String
	OrganizationBPName4           whereHelpernull_String
	BPGroup1                      whereHelpernull_String
	BPGroup2                      whereHelpernull_String
	BPGroup3                      whereHelpernull_String
	BPGroup4                      whereHelpernull_String
	BPGroup5                      whereHelpernull_String
	OrganizationFoundationDate    whereHelpernull_String
	OrganizationLiquidationDate   whereHelpernull_String
	SearchTerm1                   whereHelpernull_String
	SearchTerm2                   whereHelpernull_String
	BusinessPartnerBirthplaceName whereHelpernull_String
	BusinessPartnerDeathDate      whereHelpernull_String
	BusinessPartnerIsBlocked      whereHelpernull_Bool
	GroupBusinessPartnerName1     whereHelpernull_String
	GroupBusinessPartnerName2     whereHelpernull_String
	AddressID                     whereHelpernull_Int
	IsMarkedForArchiving          whereHelpernull_Bool
	BusinessPartnerIDByExtSystem  whereHelpernull_String
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_business_partner_general_data`.`BusinessPartner`"},
	BusinessPartnerFullName:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerName`"},
	CreationDate:                  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`CreationDate`"},
	CreationTime:                  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`CreationTime`"},
	Industry:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`Industry`"},
	LegalEntityRegistration:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LegalEntityRegistration`"},
	Language:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`Language`"},
	LastChangeDate:                whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LastChangeDate`"},
	LastChangeTime:                whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LastChangeTime`"},
	OrganizationBPName1:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName1`"},
	OrganizationBPName2:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName2`"},
	OrganizationBPName3:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName3`"},
	OrganizationBPName4:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName4`"},
	BPGroup1:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup1`"},
	BPGroup2:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup2`"},
	BPGroup3:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup3`"},
	BPGroup4:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup4`"},
	BPGroup5:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup5`"},
	OrganizationFoundationDate:    whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationFoundationDate`"},
	OrganizationLiquidationDate:   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationLiquidationDate`"},
	SearchTerm1:                   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`SearchTerm1`"},
	SearchTerm2:                   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`SearchTerm2`"},
	BusinessPartnerBirthplaceName: whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerBirthplaceName`"},
	BusinessPartnerDeathDate:      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerDeathDate`"},
	BusinessPartnerIsBlocked:      whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIsBlocked`"},
	GroupBusinessPartnerName1:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName1`"},
	GroupBusinessPartnerName2:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName2`"},
	AddressID:                     whereHelpernull_Int{field: "`data_platform_business_partner_general_data`.`AddressID`"},
	IsMarkedForArchiving:          whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`IsMarkedForArchiving`"},
	BusinessPartnerIDByExtSystem:  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIDByExtSystem`"},
}

// DataPlatformBusinessPartnerGeneralDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerGeneralDatumRels = struct {
}{}

// dataPlatformBusinessPartnerGeneralDatumR is where relationships are stored.
type dataPlatformBusinessPartnerGeneralDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerGeneralDatumR) NewStruct() *dataPlatformBusinessPartnerGeneralDatumR {
	return &dataPlatformBusinessPartnerGeneralDatumR{}
}

// dataPlatformBusinessPartnerGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerGeneralDatumL struct{}

var (
	dataPlatformBusinessPartnerGeneralDatumAllColumns            = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "CreationDate", "CreationTime", "Industry", "LegalEntityRegistration", "Language", "LastChangeDate", "LastChangeTime", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPGroup1", "BPGroup2", "BPGroup3", "BPGroup4", "BPGroup5", "OrganizationFoundationDate", "OrganizationLiquidationDate", "SearchTerm1", "SearchTerm2", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "IsMarkedForArchiving", "BusinessPartnerIDByExtSystem"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "CreationDate", "CreationTime", "Industry", "LegalEntityRegistration", "Language", "LastChangeDate", "LastChangeTime", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPGroup1", "BPGroup2", "BPGroup3", "BPGroup4", "BPGroup5", "OrganizationFoundationDate", "OrganizationLiquidationDate", "SearchTerm1", "SearchTerm2", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "IsMarkedForArchiving", "BusinessPartnerIDByExtSystem"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner"}
	dataPlatformBusinessPartnerGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerGeneralDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerGeneralDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerGeneralDatum.
	DataPlatformBusinessPartnerGeneralDatumSlice []*DataPlatformBusinessPartnerGeneralDatum
	// DataPlatformBusinessPartnerGeneralDatumHook is the signature for custom DataPlatformBusinessPartnerGeneralDatum hook methods
	DataPlatformBusinessPartnerGeneralDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerGeneralDatum) error

	dataPlatformBusinessPartnerGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerGeneralDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerGeneralDatum{})
	dataPlatformBusinessPartnerGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerGeneralDatumType)
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks []DataPlatformBusinessPartnerGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerGeneralDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerGeneralDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerGeneralDatumHook DataPlatformBusinessPartnerGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerGeneralDatum record from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	o := &DataPlatformBusinessPartnerGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerGeneralDatum records from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerGeneralDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerGeneralDatum slice")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerGeneralDatum records in the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_general_data exists")
	}

	return count > 0, nil
}

// DataPlatformBusinessPartnerGeneralData retrieves all the records using an executor.
func DataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_general_data`.*"})
	}

	return dataPlatformBusinessPartnerGeneralDatumQuery{q}
}

// FindDataPlatformBusinessPartnerGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, selectCols ...string) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	dataPlatformBusinessPartnerGeneralDatumObj := &DataPlatformBusinessPartnerGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_general_data` where `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_general_data")
	}

	if err = dataPlatformBusinessPartnerGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerGeneralDatumObj, err
	}

	return dataPlatformBusinessPartnerGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumInsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpdateCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, append(wl, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_general_data")
	}

	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns = []string{
	"BusinessPartner",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerGeneralDatum(ctx, exec, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_general_data`.* FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerGeneralDatumExists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func DataPlatformBusinessPartnerGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_general_data` where `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_general_data exists")
	}

	return exists, nil
}
